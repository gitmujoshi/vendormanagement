name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16'
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd backend
        npm ci
        cd ../frontend
        npm ci

    - name: Run backend tests
      env:
        DB_HOST: localhost
        DB_USER: test
        DB_PASSWORD: test
        DB_NAME: test_db
        JWT_SECRET: test_secret
      run: |
        cd backend
        npm test

    - name: Run frontend tests
      run: |
        cd frontend
        npm test

    - name: Build frontend
      run: |
        cd frontend
        npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push Docker images
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY_API: irrigation-api
        ECR_REPOSITORY_FRONTEND: irrigation-frontend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build and push API image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_API:$IMAGE_TAG -f docker/api/Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_API:$IMAGE_TAG

        # Build and push frontend image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG -f docker/frontend/Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG

    - name: Update ECS services
      run: |
        aws ecs update-service --cluster irrigation-cluster --service irrigation-api --force-new-deployment
        aws ecs update-service --cluster irrigation-cluster --service irrigation-frontend --force-new-deployment 